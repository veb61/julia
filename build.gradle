import com.rragraphics.hjc.*

/*last configuration*/
def lastConfig 	  = [:]


/***************************************************************************************
*
* SOME AUXILARY FUNCTIONS
*
****************************************************************************************/

def BUILD_DIR = BUILD_ROOT_PATH + "/julia_${BUILDVERSION}"

/***************************************************************************************
*
* 	BUILD TASKS SPECIFIC TO THIS PROJECT
*
***************************************************************************************/
task CheckOutBranch{
	description 'Checks out the requested branch for julia'
	def props = project.getProperties()
	getGitBranch(JULIA_SRC_PATH,props['GITBRANCH'])
}
/*making it executable only if the gitbranch is defined!*/
CheckOutBranch.onlyIf{project.hasProperty('GITBRANCH')}


task MakeJulia(type:GnuMakeBuild,dependsOn:':llvm:BuildWorld'){
	description 'actually builds the julia'
	/*FLAGS*/
	flags["USE_SYSTEM_LLVM"] 		= 1
	flags["USE_SYSTEM_LIBUNWIND"] 	= 1
	flags["USE_SYSTEM_PCRE"]		= 1
	flags["USE_SYSTEM_LIBM"]		= 1
	flags["USE_SYSTEM_OPENLIBM"]	= 1
	flags["UNTRUSTED_SYSTEM_LIBM"]	= 0
	flags["USE_SYSTEM_OPENSPECFUN"] = 1
	flags["USE_SYSTEM_DSFMT"]		= 1
	flags["USE_SYSTEM_BLAS"]		= 1
	flags["USE_SYSTEM_LAPACK"]		= 1
	flags["USE_SYSTEM_FFTW"]		= 1
	flags["USE_SYSTEM_GMP"]			= 1
	flags["USE_SYSTEM_MPFR"]		= 1
	flags["USE_SYSTEM_ARPACK"]		= 1
	flags["USE_SYSTEM_SUITESPARSE"]	= 1
	flags["USE_SYSTEM_RMATH"]		= 0
	flags["USE_SYSTEM_LIBUV"]		= 0
	flags["USE_SYSTEM_UTF8PROC"]	= 1
	flags["USE_SYSTEM_MOJIBAKE"]	= 0
	flags["USE_SYSTEM_LIBGIT2"]		= 1
	flags["VERBOSE"]				= 1


	switch(BUILDVERSION)
	{
		case "RELEASE":
			flags["JULIA_DEBUG"] 	= 0
			break;
		case "DEBUG":
			flags["JULIA_DEBUG"] 	= 1
			break;
		default:
			throw new Exception("There is no build configuration named : $BUILDVERSION");
			break;
	}
	flags["BUILDDIR"]		= BUILD_DIR + "/objs"
	flags["build_prefix"]	= BUILD_DIR
	jobs 		= 17
	workingDir 	= JULIA_SRC_PATH
	lastConfig = flags.clone()
}

task CreateJuliaSymLinks{
	description 'creates the symbolic link for the system variable "JULIA_BUILD"'
	new File(JULIA_BUILD_PATH).delete()
	def cmd = "cd " + BUILD_ROOT_PATH + " && " + "ln -sf ${BUILD_DIR}/  julia"
	executecmd(cmd)
}

task CleanJulia(type:GnuMakeBuild){
	description 'total cleaning of julia build'
	flags = lastConfig
	jobs 		= 17
	workingDir 	= JULIA_SRC_PATH
	targets = ['distcleanall']
}
/***************************************************************************************
*
*  BUILD RELATED TASKS
*
***************************************************************************************/
PreConfigWorld 	<< {
}

BuildWorld 		<< {
}

PostConfigWorld << {
}

CleanWorld 		<< {
	new File(JULIA_BUILD_PATH).delete()
}

/*Task Dependencies*/
PreConfigWorld.dependsOn CheckOutBranch
BuildWorld.dependsOn MakeJulia
PostConfigWorld.dependsOn CreateJuliaSymLinks
CleanWorld.dependsOn CleanJulia